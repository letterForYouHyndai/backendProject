<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="site.letterforyou.spring.board.mapper.BoardMapper">

	<select id="getBoardList" resultType="site.letterforyou.spring.board.domain.BoardVO">
    SELECT 
        b.board_no as boardNo,
        b.user_id as userId,
        u.user_nickname as userNickname, 
        b.board_title as boardTitle,
        b.regist_dt as registDate,
        b.board_view as boardView,
        b.board_thumbnail as boardThumbNail,
        COUNT(c.COMMENT_ID) as commentCount,
        COUNT(bl.BOARD_LIKE_NO) as likeCount
    FROM 
        (SELECT 
            board_no,
            user_id,
            board_title,
            regist_dt,
            board_view,
            board_thumbnail
        FROM tbl_board) b
    LEFT JOIN 
        tbl_user u ON b.user_id = u.user_id 
    LEFT JOIN 
        TBL_COMMENT c ON b.BOARD_NO = c.BOARD_NO
    LEFT JOIN 
        TBL_BOARD_LIKE bl ON b.BOARD_NO = bl.BOARD_NO AND bl.LIKE_YN = 'Y'
    GROUP BY 
        b.board_no, b.user_id, u.user_nickname, b.board_title, b.regist_dt, b.board_view, b.board_thumbnail <!-- Added u.user_nickname in GROUP BY -->
    <choose>
        <when test="sortBy == 'comments'">
            ORDER BY commentCount ${inOrder} , registDate DESC
        </when>
        <when test="sortBy == 'likes'">
            ORDER BY likeCount ${inOrder} , registDate DESC
        </when>
        <when test="sortBy == 'views'">
        	ORDER BY boardView ${inOrder} , registDate DESC
        </when>
        <when test="sortBy == 'dates'">
        	ORDER BY registDate ${inOrder}
        </when>
        <otherwise>
            ORDER BY b.regist_dt DESC
        </otherwise>
    </choose>
    OFFSET 
        #{offset} ROWS FETCH NEXT #{size} ROWS ONLY
</select>
	
	
	<select id="getTotalCountBoard" resultType="int">
	select count(*) as totalCount
	from tbl_board
	where use_yn= 'Y'
	
	</select>
	<select id="getBoard" parameterType="_long" resultType="site.letterforyou.spring.board.domain.BoardVO">
    SELECT 
        b.board_no as boardNo,
        b.user_id as userId,
        u.user_nickname as userNickname,  
        u.user_image as userImage,        
        b.board_title as boardTitle,
        to_char(b.board_content) as boardContent,
        b.regist_dt as registDate,
        b.board_view as boardView,
        COUNT(bl.BOARD_LIKE_NO) as likeCount  
    FROM 
        tbl_board b
    LEFT JOIN 
        tbl_board_like bl ON b.board_no = bl.board_no AND bl.LIKE_YN = 'Y' 
    LEFT JOIN 
        tbl_user u ON b.user_id = u.user_id  <!-- Joining tbl_user -->
    WHERE 
        b.board_no = #{boardNo}
    GROUP BY 
        b.board_no, b.user_id, u.user_nickname, u.user_image, b.board_title, to_char(b.board_content), b.regist_dt, b.board_view
</select>


	
	 <select id ="getAttachByBoardNo" parameterType="_long" resultType="site.letterforyou.spring.board.domain.AttachVO">
	 select attach_no as attachNo, 
	 regist_dt as registDate,
	 file_path as filePath
	 from tbl_attach
	where board_no = #{boardNo}
	 </select>
	
	
	
<insert id="addBoard" useGeneratedKeys="true" parameterType="site.letterforyou.spring.board.domain.BoardVO" >
    INSERT INTO TBL_BOARD (board_no, user_id, board_title, board_content, board_thumbnail) 
    VALUES (TBL_BOARD_SEQ.NEXTVAL, #{boardVo.userId}, #{boardVo.boardTitle}, #{boardVo.boardContent}, #{boardVo.boardThumbNail})
</insert>

	
	
	<insert id="addAttach">
    INSERT INTO TBL_ATTACH (attach_no, board_no, file_path, original_file_nm, save_file_nm) 
    VALUES (TBL_ATTACH_SEQ.nextval, #{boardNo}, #{attachVo.filePath}, #{attachVo.originalFileNm}, #{attachVo.saveFileNm})
</insert>


<update id="modifyBoard">
    UPDATE TBL_BOARD 
    SET board_title = #{boardVo.boardTitle},
        board_content = #{boardVo.boardContent},
        regist_dt = CURRENT_TIMESTAMP,
        change_dt = CURRENT_TIMESTAMP
    WHERE board_no = #{boardNo}
</update>


<update id="deleteBoard">
UPDATE TBL_BOARD
SET use_yn = 'N'
where board_no=#{boardNo}
</update>



<insert id="modifyBoardLike">
    MERGE INTO tbl_board_like tbl
    USING dual
    ON (tbl.board_no = #{boardNo} AND tbl.user_id = #{userId})
    WHEN MATCHED THEN
        UPDATE SET tbl.like_yn = CASE tbl.like_yn WHEN 'Y' THEN 'N' ELSE 'Y' END, 
                  tbl.change_dt = CURRENT_TIMESTAMP
    WHEN NOT MATCHED THEN
        INSERT (tbl.user_id, tbl.board_no, tbl.like_yn, tbl.regist_dt)
        VALUES (#{userId}, #{boardNo}, 'Y', CURRENT_TIMESTAMP)
</insert>

<select id="getBoardLike" resultType="site.letterforyou.spring.board.domain.BoardVO">
    SELECT board_no as boardNo , like_yn as likeYn
    FROM tbl_board_like
    WHERE board_no = #{boardNo} AND user_id = #{userId}
</select>


<update id="updateBoardLike">

update tbl_board
set board_view= board_view+1
where board_no = #{boardNo}
</update>

<select id="getLatestBoardNo" resultType="long">
select board_no as boardNo
from tbl_board
order by regist_dt desc
FETCH FIRST 1 ROW ONLY

</select>

<select id="getUser" resultType = "site.letterforyou.spring.member.domain.MemberDTO">
SELECT
		    USER_ID AS userId
		    , USER_NAME  AS userName
		    , USER_EMAIL  AS userEmail
		    , USER_NICKNAME AS userNickname
		    , USER_IMAGE AS userImage
		    , USER_SIGNUP_DT AS userSignupDt
		FROM 
		    TBL_USER
		    where user_id = #{userId}
		   </select>
	
</mapper>