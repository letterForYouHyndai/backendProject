<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="site.letterforyou.spring.template.mapper.TemplateMapper">

	<select id="getTemplateList" resultType="site.letterforyou.spring.template.domain.TemplateVO">
    select 
        t.template_no as templateNo,
        t.template_title as templateTitle,
        to_char(t.template_content) as templateContent,
        t.regist_dt as registDate,
        count(tl.template_like_no) as templateLikes
    from 
        (select 
            template_no,
            template_title,
            template_content,
            regist_dt
        from tbl_template) t
    left join 
        tbl_template_like tl on t.template_no = tl.template_no and tl.like_yn = 'Y'
    group by 
        t.template_no, t.template_title, to_char(t.template_content), t.regist_dt
    <choose>
        <when test="sortBy == 'likes'">
            order by templateLikes ${inOrder}, registDate desc
        </when>
        <when test="sortBy == 'dates'">
            order by registDate ${inOrder}
        </when>
        <otherwise>
            order by t.regist_dt desc
        </otherwise>
    </choose>
    offset 
        #{offset} rows fetch next #{size} rows only
</select>

<select id="getTemplateSearchList" resultType="site.letterforyou.spring.template.domain.TemplateVO">
    select 
        t.template_no as templateNo,
        t.template_title as templateTitle,
        to_char(t.template_content) as templateContent,
        t.regist_dt as registDate,
        count(tl.template_like_no) as templateLikes
    from 
        (select 
            template_no,
            template_title,
            template_content,
            regist_dt
        from tbl_template
        where template_title like '%' || #{keyword} || '%') t
    left join 
        tbl_template_like tl on t.template_no = tl.template_no and tl.like_yn = 'Y'
    group by 
        t.template_no, t.template_title, to_char(t.template_content), t.regist_dt
    <choose>
        <when test="sortBy == 'likes'">
            order by templateLikes ${inOrder}, registDate desc
        </when>
        <when test="sortBy == 'dates'">
            order by registDate ${inOrder}
        </when>
        <otherwise>
            order by t.regist_dt desc
        </otherwise>
    </choose>
    offset 
        #{offset} rows fetch next #{size} rows only
</select>

<select id="getTotalCountTemplate" resultType="int">
    select count(*)
    from tbl_template
</select>

<select id="getTemplate" resultType="site.letterforyou.spring.template.domain.TemplateVO">
    select like_yn as likeYn
    from tbl_template_like
    where template_no = #{templateNo}
</select>

<select id="getTotalCountTemplateByKeyword" parameterType="String" resultType="int">
    select count(*)
    from tbl_template
    where template_title like '%' || #{keyword} || '%'
</select>

<insert id="updateTemplateLike">
    merge into tbl_template_like tbl
    using dual
    on (tbl.template_no = #{templateNo} and tbl.user_id = #{userId})
    when matched then
        update set tbl.like_yn = case tbl.like_yn when 'Y' then 'N' else 'Y' end, 
                  tbl.change_dt = current_timestamp
    when not matched then
        insert (tbl.user_id, tbl.template_no, tbl.like_yn, tbl.regist_dt)
        values (#{userId}, #{templateNo}, 'Y', current_timestamp)
</insert>
</mapper>